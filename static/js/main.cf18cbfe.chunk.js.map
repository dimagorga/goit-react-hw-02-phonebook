{"version":3,"sources":["Components/ContactForm/ContactForm.jsx","Components/ContactsList/ContactsList.jsx","Components/Filter/Filter.jsx","App.js","index.js"],"names":["ContactForm","handleSubmit","handleChange","onSubmit","htmlFor","uuidv4","type","onChange","name","pattern","title","required","ContactsList","contactsList","map","id","number","Filter","INITIAL_STATE","App","state","contacts","filter","target","value","setState","e","preventDefault","prevState","reset","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAgCeA,MA9Bf,YAAsD,IAA/BC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,aACnC,OACE,uBAAMC,SAAUF,EAAhB,UACE,wBAAOG,QAASC,cAAhB,iBAEE,uBACEC,KAAK,OACLC,SAAUL,EACVM,KAAK,OACLC,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAGZ,wBAAOP,QAASC,cAAhB,mBAEE,uBACEC,KAAK,MACLC,SAAUL,EACVM,KAAK,SACLC,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAGZ,wBAAQL,KAAK,SAAb,6BCbSM,MAdf,YAAyC,IAAjBC,EAAgB,EAAhBA,aACtB,OACE,6BACGA,EAAaC,KAAI,YAA2B,IAAxBC,EAAuB,EAAvBA,GAAIP,EAAmB,EAAnBA,KAAMQ,EAAa,EAAbA,OAC7B,OACE,+BACGR,EADH,KACWQ,IADFD,SCKJE,MARf,YAAmC,IAAjBf,EAAgB,EAAhBA,aAChB,OACE,wBAAOE,QAASC,cAAhB,yBAEE,uBAAOC,KAAK,OAAOC,SAAUL,EAAcM,KAAK,SAASG,UAAQ,QCAjEO,EAAgB,CACpBV,KAAM,GACNQ,OAAQ,IAiEKG,E,4MA7DbC,M,aACEC,SAAU,CACR,CAAEN,GAAI,OAAQP,KAAM,gBAAiBQ,OAAQ,aAC7C,CAAED,GAAI,OAAQP,KAAM,iBAAkBQ,OAAQ,aAC9C,CAAED,GAAI,OAAQP,KAAM,gBAAiBQ,OAAQ,aAC7C,CAAED,GAAI,OAAQP,KAAM,iBAAkBQ,OAAQ,cAEhDM,OAAQ,IACLJ,G,EAGLhB,aAAe,YAAiB,IAAdqB,EAAa,EAAbA,OACRf,EAAgBe,EAAhBf,KAAMgB,EAAUD,EAAVC,MAEd,EAAKC,SAAL,eAAiBjB,EAAOgB,K,EAG1BvB,aAAe,SAACyB,GACdA,EAAEC,iBACF,EAAKF,UAAS,SAACG,GAAD,MAAgB,CAC5BP,SAAS,GAAD,mBACHO,EAAUP,UADP,CAEN,CACEb,KAAM,EAAKY,MAAMZ,KACjBQ,OAAQ,EAAKI,MAAMJ,OACnBD,GAAIV,qBAIV,EAAKwB,S,EAGPA,MAAQ,WACN,EAAKJ,SAAL,eAAmBP,K,4CAWrB,WAEE,OACE,gCACE,2CACA,cAAC,EAAD,CACEjB,aAAc6B,KAAK7B,aACnBC,aAAc4B,KAAK5B,eAErB,0CACA,cAAC,EAAD,CAAQA,aAAc4B,KAAK5B,eAC3B,cAAC,EAAD,CAAcW,aAAciB,KAAKV,MAAMC,kB,GAxD7BU,aCNlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.cf18cbfe.chunk.js","sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\r\n\r\nfunction ContactForm({ handleSubmit, handleChange }) {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor={uuidv4()}>\r\n        Name\r\n        <input\r\n          type=\"text\"\r\n          onChange={handleChange}\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        />\r\n      </label>\r\n      <label htmlFor={uuidv4()}>\r\n        Number\r\n        <input\r\n          type=\"tel\"\r\n          onChange={handleChange}\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n      </label>\r\n      <button type=\"submit\">Add contact</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ContactForm;\r\n","function ContactsList({ contactsList }) {\r\n  return (\r\n    <ul>\r\n      {contactsList.map(({ id, name, number }) => {\r\n        return (\r\n          <li key={id}>\r\n            {name}: {number}\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default ContactsList;\r\n","import { v4 as uuidv4 } from \"uuid\";\r\n\r\nfunction Filter({ handleChange }) {\r\n  return (\r\n    <label htmlFor={uuidv4()}>\r\n      Find contact\r\n      <input type=\"text\" onChange={handleChange} name=\"filter\" required />\r\n    </label>\r\n  );\r\n}\r\nexport default Filter;\r\n","import { Component } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport ContactForm from \"./Components/ContactForm/ContactForm\";\nimport ContactsList from \"./Components/ContactsList/ContactsList\";\nimport Filter from \"./Components/Filter/Filter\";\n\nconst INITIAL_STATE = {\n  name: \"\",\n  number: \"\",\n};\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ],\n    filter: \"\",\n    ...INITIAL_STATE,\n  };\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.setState((prevState) => ({\n      contacts: [\n        ...prevState.contacts,\n        {\n          name: this.state.name,\n          number: this.state.number,\n          id: uuidv4(),\n        },\n      ],\n    }));\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ ...INITIAL_STATE });\n  };\n\n  // getVisibleContacts = () => {\n  //   const { filter, contacts } = this.state;\n  //   const normalizedFilter = filter.toLowerCase();\n  //   return contacts.filter((contact) =>\n  //     contact.text.toLowerCase().includes(normalizedFilter)\n  //   );\n  // };\n\n  render() {\n    // const visibleContacts = this.getVisibleContacts();\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm\n          handleSubmit={this.handleSubmit}\n          handleChange={this.handleChange}\n        />\n        <h2>Contacts</h2>\n        <Filter handleChange={this.handleChange} />\n        <ContactsList contactsList={this.state.contacts} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}