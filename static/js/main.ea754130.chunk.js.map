{"version":3,"sources":["Components/ContactForm/ContactForm.module.css","Components/ContactsList/ContactsList.module.css","Components/Filter/Filter.module.css","Components/Button/Button.module.css","Components/Button/Button.jsx","Components/ContactForm/ContactForm.jsx","Components/ContactsList/ContactsList.jsx","Components/Filter/Filter.jsx","App.js","index.js"],"names":["module","exports","Button","type","buttonName","handleClick","id","className","s","button","onClick","ContactForm","state","name","number","handleChange","target","value","setState","onSubmit","e","preventDefault","props","handleSubmit","uuidv4","reset","this","form","htmlFor","input","onChange","pattern","title","required","Component","ContactsList","contactsList","handleRemove","list","map","item","currentTarget","Filter","label","App","contacts","filter","addContact","nextContact","some","contact","toLocaleLowerCase","alert","prevState","changeFilter","getVisibleContacts","normalizedFilter","toLowerCase","includes","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","visibleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea754130.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__11I6o\",\"input\":\"ContactForm_input__3w2yf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__1QLGT\",\"item\":\"ContactsList_item__2FbM_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__2P866\",\"input\":\"Filter_input__1bhIE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1P3VE\"};","import PropTypes from \"prop-types\";\r\nimport s from \"./Button.module.css\";\r\nfunction Button({ type, buttonName, handleClick, id }) {\r\n  return (\r\n    <button className={s.button} onClick={handleClick} id={id} type={type}>\r\n      {buttonName}\r\n    </button>\r\n  );\r\n}\r\n\r\nButton.propTypes = {\r\n  type: PropTypes.string,\r\n  buttonName: PropTypes.string,\r\n  handleClick: PropTypes.func,\r\n};\r\n\r\nexport default Button;\r\n","import { Component } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport s from \"./ContactForm.module.css\";\r\nimport Button from \"../Button/Button\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.handleSubmit({ ...this.state, id: uuidv4() });\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    const { onSubmit, handleChange } = this;\r\n    return (\r\n      <form className={s.form} onSubmit={onSubmit}>\r\n        <label htmlFor={uuidv4()}>\r\n          Name\r\n          <input\r\n            className={s.input}\r\n            type=\"text\"\r\n            onChange={handleChange}\r\n            name=\"name\"\r\n            value={this.state.name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n        <label htmlFor={uuidv4()}>\r\n          Number\r\n          <input\r\n            className={s.input}\r\n            type=\"tel\"\r\n            onChange={handleChange}\r\n            name=\"number\"\r\n            value={this.state.number}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n        <Button type=\"submit\" buttonName=\"Add contact\" />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;\r\n","import PropTypes from \"prop-types\";\r\nimport s from \"./ContactsList.module.css\";\r\nimport Button from \"../Button/Button\";\r\n\r\nfunction ContactsList({ contactsList, handleRemove }) {\r\n  return (\r\n    <ul className={s.list}>\r\n      {contactsList.map(({ id, name, number }) => {\r\n        return (\r\n          <li className={s.item} key={id}>\r\n            <p>\r\n              {name}: {number}{\" \"}\r\n            </p>\r\n            <Button\r\n              type=\"button\"\r\n              handleClick={(e) => {\r\n                handleRemove(e.currentTarget.id);\r\n              }}\r\n              buttonName=\"Delete\"\r\n              id={id}\r\n            />\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\nContactsList.propTypes = {\r\n  contactsList: PropTypes.array,\r\n  handleRemove: PropTypes.func,\r\n};\r\n\r\nexport default ContactsList;\r\n","import PropTypes from \"prop-types\";\r\nimport s from \"./Filter.module.css\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nfunction Filter({ onChange }) {\r\n  return (\r\n    <label className={s.label} htmlFor={uuidv4()}>\r\n      Find contacts by name\r\n      <input\r\n        className={s.input}\r\n        type=\"text\"\r\n        onChange={onChange}\r\n        name=\"filter\"\r\n        required\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nexport default Filter;\r\n","import { Component } from \"react\";\nimport ContactForm from \"./Components/ContactForm/ContactForm\";\nimport ContactsList from \"./Components/ContactsList/ContactsList\";\nimport Filter from \"./Components/Filter/Filter\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem(\"contacts\");\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  addContact = (nextContact) => {\n    const { contacts } = this.state;\n    const sameName = contacts.some(\n      (contact) =>\n        contact.name.toLocaleLowerCase() ===\n        nextContact.name.toLocaleLowerCase()\n    );\n    if (sameName) {\n      alert(`${nextContact.name} is already in contacts`);\n    } else {\n      this.setState((prevState) => ({\n        contacts: [nextContact, ...prevState.contacts],\n      }));\n    }\n  };\n\n  handleRemove = (id) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter((contact) => contact.id !== id),\n    }));\n  };\n\n  changeFilter = (e) => {\n    this.setState({ filter: e.target.value });\n  };\n\n  getVisibleContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter((contact) => {\n      return contact.name.toLowerCase().includes(normalizedFilter);\n    });\n  };\n\n  render() {\n    const { filter } = this.state;\n    const visibleContacts = this.getVisibleContacts();\n    return (\n      <div className=\"container\">\n        <h1 className=\"mainTitle\">Phonebook</h1>\n        <ContactForm handleSubmit={this.addContact} />\n        <h2 className=\"contactsTitle\">Contacts</h2>\n        <Filter value={filter} onChange={this.changeFilter} />\n        <ContactsList\n          contactsList={visibleContacts}\n          handleRemove={this.handleRemove}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}